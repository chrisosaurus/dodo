.TH dodo 1 dodo\-VERSION


.SH NAME
dodo - a scriptable in-place file ditor


.SH SYNOPSIS
.B dodo filename


.SH DESCRIPTION
dodo is a non-interactive scriptable in place file editor.
It takes the file to work on as an argument, and it takes its program input from stdin.
.P
dodo was born from the need to efficiently edit very large files (16GB plain sql dumps),
I was unable to do so using my normal toolset (ed, sed or vim) and I realised that writing a tool
specifically for this use case would be very simple.


.SH WARNING
dodo is a work in progress so it is highly recommended you backup any files you are
going to modify using dodo.


.SH USAGE
dodo is run and supplied with its last argument representing the filename to work on.
dodo then reads its commands from stdin.
In its default mode, dodo is non-interactive so will not start work until its stdin input is finished (it sees EOF).
An optional 'interactive' mode is available in which dodo provides a prompt and executes its input upon a carriage return.
This is especially useful for playing with the language amongst other things.
In dodo all changes are flushed immediately; there are no concepts of 'saving', 'undo' or 'backups'.

dodo is really a very thin wrapper around `fread` and `fwrite`.


.IP "./dodo [-i|--interactive] filename <<EOF"
 p          # print 100 bytes
 p5         # print 5 bytes ('hello')
 e/hello/   # expect string 'hello'
 b6         # goto byte 6 in file
 e/world/   # expect string 'world'
 w/marge/   # write string 'marge' (writes over 'world')
 b38        # goto byte 38 in file
 e/sl\\/ash/ # expect string 'sl/ash'
 w/slashy/  # write over string 'sl/ash' with 'slashy'
 q          # quit
.IR
.P
EOF

.P
Each of the commands is explained below in more detail.


.SH COMMANDS
dodo currently supports the following commands and syntax:

.IP "\fIprint\fR"
.br
p
pnumber

print specified number of bytes, if number is not specified will default to 100
.IR
.IP "\fIline\fR"
.br
lnumber

place cursor at the start of line 'number', lines are 0-based
Warning: this may be expensive in large files
.IR
.IP "\fIexpect\fR"
.br
e/string/

check for 'string' at current cursor position, exit with error if not found.
expect does not move the cursor.
.IR
.IP "\fIbyte\fR"
.br
bnumber

move cursor to absolute byte 'number' within file, bytes are 0-based
.IR
.IP "\fIwrite\fR"
.br
w/string/

write 'string' to current cursor position, this will overwrite any characters in the way
write moves the cursor by the number of bytes written
.IR
.IP "\fItruncate\fR"
.br
t

truncate the file at the current cursor position.
Note that since the cursor can be inside or outside of the file, this can be used to truncate or extend files.
.IR
.IP "\fIquit\fR"
.br
q

exit dodo, quit is not actually needed as EOF will trigger an implicit quit.


.SH Syntax

.IR
.IP "\fIcomments\fR"
.br
dodo also supports comments

# this is a comment and spans until \\n
.IR
.IP "\fIwhitespace\fR"
.br
in dodo whitespace is non-significant except in the case of a newline ('\\n') terminating a comment
.IR
.IP "\fIescape character\fR"
.br
a backslash can be used as an escape character, useful mainly when the expected string or replacement string has to include a string delimiter (forward slash)

e/foo\\/bar/
.br
w/baz\\\\qux/

will replace \fIfoo/bar\fR with \fIbaz\\qux\fR
.IR

.SH AUTHOR
Dodo was made by Chris Hall <followingthepath AT gmail d0t com>

with contributions from David Phillips

.SH BUGS
Please report all bugs to the author, or report them on the project's GitHub issue tracker \fIhttps://github.com/mkfifo/dodo/issues\fR


